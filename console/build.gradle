apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "application"

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

mainClassName = "info.spiralframework.console.jvm.Cockpit"

kotlin {
    jvm {
        compilations.main.kotlinOptions {
            jvmTarget = "1.8"
            languageVersion = "1.3"
        }
    }

    sourceSets {
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation project(":spiral-antlr-pipeline")
                implementation project(":spiral-base")
                implementation project(":spiral-bst")
                implementation project(":spiral-formats")
                implementation project(":spiral-osl")
                implementation project(":spiral-core")
                implementation project(":spiral-updater")

                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.3.7-1.4-M2'
                implementation "ch.qos.logback:logback-classic:$logback_version"
                implementation "dev.brella:kornea-img:$kornea_img_version"

                implementation "org.antlr:antlr4:4.7.2"
            }
        }
    }
}

jvmJar {
    archiveBaseName.set("spiral-$project.name")
    archiveVersion.set(project_version)
}

task jvmShadowJar(type: ShadowJar, dependsOn: [jvmJar]) {
    mergeServiceFiles()
    from jvmJar.archiveFile
    configurations = [project.configurations.jvmRuntimeClasspath]
    manifest {
        attributes 'Main-Class': mainClassName
    }
    
    group = "shadow"

    archiveBaseName.set(jvmJar.archiveBaseName.get())
    archiveAppendix.set(jvmJar.archiveAppendix.getOrNull())
    archiveVersion.set(jvmJar.archiveVersion.get())
    archiveClassifier.set("shadow")
}


//publishing {
//    publications {
//        maven(MavenPublication) {
//            artifact shadowJar
//        }
//    }
//}

downloadLicenses {
    includeProjectDependencies = true
    dependencyConfiguration = 'jvmRuntimeClasspath'
}