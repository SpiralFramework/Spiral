apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

ext {
    serialization_version = "0.20.0-1.4-M2"
}

repositories {
    maven { url = uri("https://dl.bintray.com/korlibs/korlibs/") }
}

kotlin {
    jvm {
        compilations.main.kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    js()
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation kotlin('reflect')

                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7-1.4-M2'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"

                api "com.soywiz.korlibs.krypto:krypto:1.7.1"

                api project(":spiral-base")
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation kotlin('reflect')

//                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7-1.4-M2'
//                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation kotlin('reflect')

//                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.3.7-1.4-M2'
//                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"
            }
        }

        all {
            languageSettings {
                enableLanguageFeature("InlineClasses")
                useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes')
                useExperimentalAnnotation('kotlin.ExperimentalStdlibApi')
                useExperimentalAnnotation('kotlin.contracts.ExperimentalContracts')
            }
        }
//        jsTest {
//            dependencies {
//                implementation kotlin('test-js')
//            }
//        }
//        mingwMain {
//        }
//        mingwTest {
//        }
    }
}

downloadLicenses {
    includeProjectDependencies = true
    dependencyConfiguration = 'jvmRuntimeClasspath'
}